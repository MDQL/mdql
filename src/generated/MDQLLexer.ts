// Generated from MDQL.g4 by ANTLR 4.13.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class MDQLLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly COMPARE_OPERATOR = 2;
	public static readonly OP_EQUALS = 3;
	public static readonly OP_NOTEQUALS = 4;
	public static readonly OP_CONTAINS = 5;
	public static readonly OP_ENDS_WITH = 6;
	public static readonly OP_STARTS_WITH = 7;
	public static readonly AS = 8;
	public static readonly NEWLINE = 9;
	public static readonly TASKS = 10;
	public static readonly DOCUMENTS = 11;
	public static readonly TASKLIST = 12;
	public static readonly LIST = 13;
	public static readonly TABLE = 14;
	public static readonly FROM = 15;
	public static readonly WHERE = 16;
	public static readonly AND = 17;
	public static readonly SORT = 18;
	public static readonly DESC = 19;
	public static readonly FIELD = 20;
	public static readonly STRING_LITERAL = 21;
	public static readonly WS = 22;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "','", 
                                                            null, "'='", 
                                                            "'!='", "'=~'", 
                                                            "'=$'", "'=^'", 
                                                            null, null, 
                                                            "'tasks'", "'documents'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             "COMPARE_OPERATOR", 
                                                             "OP_EQUALS", 
                                                             "OP_NOTEQUALS", 
                                                             "OP_CONTAINS", 
                                                             "OP_ENDS_WITH", 
                                                             "OP_STARTS_WITH", 
                                                             "AS", "NEWLINE", 
                                                             "TASKS", "DOCUMENTS", 
                                                             "TASKLIST", 
                                                             "LIST", "TABLE", 
                                                             "FROM", "WHERE", 
                                                             "AND", "SORT", 
                                                             "DESC", "FIELD", 
                                                             "STRING_LITERAL", 
                                                             "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "COMPARE_OPERATOR", "OP_EQUALS", "OP_NOTEQUALS", "OP_CONTAINS", 
		"OP_ENDS_WITH", "OP_STARTS_WITH", "AS", "NEWLINE", "TASKS", "DOCUMENTS", 
		"TASKLIST", "LIST", "TABLE", "FROM", "WHERE", "AND", "SORT", "DESC", "FIELD", 
		"STRING_LITERAL", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, MDQLLexer._ATN, MDQLLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "MDQL.g4"; }

	public get literalNames(): (string | null)[] { return MDQLLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return MDQLLexer.symbolicNames; }
	public get ruleNames(): string[] { return MDQLLexer.ruleNames; }

	public get serializedATN(): number[] { return MDQLLexer._serializedATN; }

	public get channelNames(): string[] { return MDQLLexer.channelNames; }

	public get modeNames(): string[] { return MDQLLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,22,210,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,
	1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
	6,1,6,1,7,1,7,1,7,1,7,3,7,73,8,7,1,8,4,8,76,8,8,11,8,12,8,77,1,8,1,8,1,
	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
	11,1,11,3,11,114,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,124,
	8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,136,8,13,1,
	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,146,8,14,1,15,1,15,1,15,1,15,
	1,15,1,15,1,15,1,15,1,15,1,15,3,15,158,8,15,1,16,1,16,1,16,1,16,1,16,1,
	16,3,16,166,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,176,8,17,
	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,186,8,18,1,19,4,19,189,8,19,
	11,19,12,19,190,1,20,1,20,1,20,1,20,5,20,197,8,20,10,20,12,20,200,9,20,
	1,20,1,20,1,21,4,21,205,8,21,11,21,12,21,206,1,21,1,21,0,0,22,1,1,3,2,5,
	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
	33,17,35,18,37,19,39,20,41,21,43,22,1,0,4,2,0,10,10,13,13,4,0,46,46,48,
	57,65,90,97,122,1,0,39,39,3,0,9,10,13,13,32,32,227,0,1,1,0,0,0,0,3,1,0,
	0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
	0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,52,1,0,0,
	0,5,54,1,0,0,0,7,56,1,0,0,0,9,59,1,0,0,0,11,62,1,0,0,0,13,65,1,0,0,0,15,
	72,1,0,0,0,17,75,1,0,0,0,19,81,1,0,0,0,21,87,1,0,0,0,23,113,1,0,0,0,25,
	123,1,0,0,0,27,135,1,0,0,0,29,145,1,0,0,0,31,157,1,0,0,0,33,165,1,0,0,0,
	35,175,1,0,0,0,37,185,1,0,0,0,39,188,1,0,0,0,41,192,1,0,0,0,43,204,1,0,
	0,0,45,46,5,44,0,0,46,2,1,0,0,0,47,53,3,5,2,0,48,53,3,7,3,0,49,53,3,9,4,
	0,50,53,3,11,5,0,51,53,3,13,6,0,52,47,1,0,0,0,52,48,1,0,0,0,52,49,1,0,0,
	0,52,50,1,0,0,0,52,51,1,0,0,0,53,4,1,0,0,0,54,55,5,61,0,0,55,6,1,0,0,0,
	56,57,5,33,0,0,57,58,5,61,0,0,58,8,1,0,0,0,59,60,5,61,0,0,60,61,5,126,0,
	0,61,10,1,0,0,0,62,63,5,61,0,0,63,64,5,36,0,0,64,12,1,0,0,0,65,66,5,61,
	0,0,66,67,5,94,0,0,67,14,1,0,0,0,68,69,5,65,0,0,69,73,5,83,0,0,70,71,5,
	97,0,0,71,73,5,115,0,0,72,68,1,0,0,0,72,70,1,0,0,0,73,16,1,0,0,0,74,76,
	7,0,0,0,75,74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,79,1,
	0,0,0,79,80,6,8,0,0,80,18,1,0,0,0,81,82,5,116,0,0,82,83,5,97,0,0,83,84,
	5,115,0,0,84,85,5,107,0,0,85,86,5,115,0,0,86,20,1,0,0,0,87,88,5,100,0,0,
	88,89,5,111,0,0,89,90,5,99,0,0,90,91,5,117,0,0,91,92,5,109,0,0,92,93,5,
	101,0,0,93,94,5,110,0,0,94,95,5,116,0,0,95,96,5,115,0,0,96,22,1,0,0,0,97,
	98,5,116,0,0,98,99,5,97,0,0,99,100,5,115,0,0,100,101,5,107,0,0,101,102,
	5,108,0,0,102,103,5,105,0,0,103,104,5,115,0,0,104,114,5,116,0,0,105,106,
	5,84,0,0,106,107,5,65,0,0,107,108,5,83,0,0,108,109,5,75,0,0,109,110,5,76,
	0,0,110,111,5,73,0,0,111,112,5,83,0,0,112,114,5,84,0,0,113,97,1,0,0,0,113,
	105,1,0,0,0,114,24,1,0,0,0,115,116,5,108,0,0,116,117,5,105,0,0,117,118,
	5,115,0,0,118,124,5,116,0,0,119,120,5,76,0,0,120,121,5,73,0,0,121,122,5,
	83,0,0,122,124,5,84,0,0,123,115,1,0,0,0,123,119,1,0,0,0,124,26,1,0,0,0,
	125,126,5,116,0,0,126,127,5,97,0,0,127,128,5,98,0,0,128,129,5,108,0,0,129,
	136,5,101,0,0,130,131,5,84,0,0,131,132,5,65,0,0,132,133,5,66,0,0,133,134,
	5,76,0,0,134,136,5,69,0,0,135,125,1,0,0,0,135,130,1,0,0,0,136,28,1,0,0,
	0,137,138,5,102,0,0,138,139,5,114,0,0,139,140,5,111,0,0,140,146,5,109,0,
	0,141,142,5,70,0,0,142,143,5,82,0,0,143,144,5,79,0,0,144,146,5,77,0,0,145,
	137,1,0,0,0,145,141,1,0,0,0,146,30,1,0,0,0,147,148,5,119,0,0,148,149,5,
	104,0,0,149,150,5,101,0,0,150,151,5,114,0,0,151,158,5,101,0,0,152,153,5,
	87,0,0,153,154,5,72,0,0,154,155,5,69,0,0,155,156,5,82,0,0,156,158,5,69,
	0,0,157,147,1,0,0,0,157,152,1,0,0,0,158,32,1,0,0,0,159,160,5,97,0,0,160,
	161,5,110,0,0,161,166,5,100,0,0,162,163,5,65,0,0,163,164,5,78,0,0,164,166,
	5,68,0,0,165,159,1,0,0,0,165,162,1,0,0,0,166,34,1,0,0,0,167,168,5,115,0,
	0,168,169,5,111,0,0,169,170,5,114,0,0,170,176,5,116,0,0,171,172,5,83,0,
	0,172,173,5,79,0,0,173,174,5,82,0,0,174,176,5,84,0,0,175,167,1,0,0,0,175,
	171,1,0,0,0,176,36,1,0,0,0,177,178,5,100,0,0,178,179,5,101,0,0,179,180,
	5,115,0,0,180,186,5,99,0,0,181,182,5,68,0,0,182,183,5,69,0,0,183,184,5,
	83,0,0,184,186,5,67,0,0,185,177,1,0,0,0,185,181,1,0,0,0,186,38,1,0,0,0,
	187,189,7,1,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,
	1,0,0,0,191,40,1,0,0,0,192,198,5,39,0,0,193,197,8,2,0,0,194,195,5,39,0,
	0,195,197,5,39,0,0,196,193,1,0,0,0,196,194,1,0,0,0,197,200,1,0,0,0,198,
	196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,5,39,
	0,0,202,42,1,0,0,0,203,205,7,3,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,
	204,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,6,21,0,0,209,44,1,0,
	0,0,16,0,52,72,77,113,123,135,145,157,165,175,185,190,196,198,206,1,6,0,
	0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MDQLLexer.__ATN) {
			MDQLLexer.__ATN = new ATNDeserializer().deserialize(MDQLLexer._serializedATN);
		}

		return MDQLLexer.__ATN;
	}


	static DecisionsToDFA = MDQLLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}